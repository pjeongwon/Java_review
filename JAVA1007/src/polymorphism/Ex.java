package polymorphism;

public class Ex {

	public static void main(String[] args) {
		/*
		 * 레퍼런스 형 변환
		 * - 참조형 변수(레퍼런스 타입 변수)끼리의 형 변환(= 객체의 형 변환)
		 * - 업캐스팅(Up Casting)과 다운캐스팅(Down Casting)으로 나뉨
		 * - 참조형 변수로 다른 타입의 인스턴스를 참조하기 위해 변환하는 것
		 * - 형 변환 시 형 변환 연산자(= 캐스팅 연산자)를 사용하여 변환
		 *   ex) (변환할 데이터타입)객체;
		 * - 상속관계에서만 가능한 형 변환
		 * 
		 * 1. 업캐스팅(Up Casting)
		 * - 슈퍼클래스의 레퍼런스가 서브클래스의 인스턴스를 가리키는 것(= 참조하는 것)
		 *   (= 서브클래스의 인스턴스를 슈퍼클래스 타입으로 형 변환 하는 것)
		 * - 묵시적 형 변환(= 자동 형 변환)이 일어남
		 * - 참조 가능한 영역의 축소 발생
		 *   => 상속된 멤버에만 접근 가능하고, 서브클래스 전용 멤버에는 접그 불가능하게 됨
		 * - 일반적으로 클래스(객체)끼리의 형 변환은 업캐스팅을 의미함
		 * 
		 * < 기본 문법 >
		 * 슈퍼클래스타입 참조변수 = 서브클래스인스턴스;
		 * 
		 */

		// 서브클래스 Child의 인스턴스 생성
		Child c = new Child(); // Child인스턴스 주소가 Child타입 변수 c에 저장됨
		// Child타입 변수 c로 접근 가능한 메서드 : 2개
		c.parentPrn(); // 슈퍼클래스로부터 상속받은 메서드
		c.childPrn(); // 서브클래스(자신)가 직접 정의한 메서드
		
		System.out.println("-------------------------");
		
		// ======================= 업 캐스팅 =======================
		// 슈퍼클래스 타입 레퍼런스 변수 p선언
//		Parent p;
		// 서브클래스(Child)의 인스턴스 주소를 슈퍼클래스(Parent)타입 변수 p에 저장
//		p = c; //  서브클래스 Child타입 인스턴스가 슈퍼클래스 Parent타입으로 변환됨 = 업캐스팅
		// => 슈퍼클래스의 참조변수가 서브클래스의 인스턴스(c) 주소를 가리킴(참조함)
		// => 업캐스팅은 자동(묵시적) 형 변환이 일어남
		Parent p = c;
		
		// Parent타입 변수 p로 접근 가능한 메서드 : 2개(X) -> 1개(O)
		p.parentPrn(); // 슈퍼클래스로부터 상속받은 메서드(= 공통 메서드)
//		p.childPrn(); // 컴파일 에러 발생! 서브클래스에서 직접 정의한 메서드 => 접근 불가
		// 슈퍼클래스타입 레퍼런스 변수가  서브클래스의 인스턴스를 참조하는 업캐스팅의 경우
		// 참조 영역에 대한 축소(= 제한)로 인해 서브클래스의 전용 멤버가 보이지 않는다!
		// => 공통된 멤버(= 상속된 멤버)에만 접근 가능하도록 축소됨
		
		System.out.println("=========================");
		// ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
		
		// ======================= 다운 캐스팅 =======================
		/*
		 * - 서브클래스의 레퍼런스가 슈퍼클래스의 인스턴스를 가리키는 것(= 참조하는 것)
		 *   (= 슈퍼클래스의 인스턴스를 서브클래스 타입으로 형 변환 하는 것)
		 * - 참조 가능한 영역의 확대 발생
		 * - 자동(묵시적)형 변환이 일어나지 않음 = 명시적 형 변환(= 강제 형 변환)이 필수!
		 * - 강제 형변환을 통해 문법적 오류가 해결되더라도 
		 *   실제 실행하는 시점에서 오류(= 논리적 오류)가 발생하게 됨
		 *   => 참조 영역의 확대로 존재하지 않는 영역에 대한 참조 위험성 때문
		 */
		
		// 슈퍼클래스 Parent인스턴스(p2) 생성
		Parent p2 = new Parent();
		// 슈퍼클래스 타입 Parent변수 p2로 접근 가능한 메서드 : 1개
		p2.parentPrn();
		
		// 서브클래스 Child타입 변수 c2를 선언하고 p2에 저장된 인스턴스 주소를 전달
//		Child c2 = p2; // 컴파일 에러 발생! (Type mismatch: cannot convert from Parent to Child)
		// 다운캐스팅의 경우 강제(명시적) 형변환을 통해 변환해야한다!
		
//		Child c2 = (Child)p2; // Parent타입 -> Child타입으로 강제형변환 수행 = 다운캐스팅
		// => 문법적 오류(구문 오류)는 해결되지만, 실행 시 오류(= 논리 오류)가 발생함!
		
		// 실행 시 오류가 발생하는 이유
		// Child타입 변수 c2로 접근 가능한 메서드 : 2개 
//		c2.parentPrn(); // Parent타입 인스턴스에 실제 존재하는 메서드
//		c2.childPrn(); // Parent타입 인스턴스에 실제 존재하지 않는 메서드(없으므로 호출되면 안됨)
		// => 즉, 존재하지 않는 영역(childPrn()에 대한 참조 위험성 때문에 다운캐스팅 불가!

		System.out.println("=========================");
		
		// 다운캐스팅이 가능한 경우
		// Child타입 인스턴스를 Parent타입 변수 p3에 전달 = 업캐스팅
		Parent p3 = new Child(); // Child인스턴스에 존재하는 메서드 : 2개(parentPrn(), childPrn())
		// 업캐스팅에 의해 참조 영역이 축소됨(접근 가능한 메서드 : 2개 -> 1개)
		p3.parentPrn(); // 상속된 메서드(공통 영역) 접근 가능
//		p3.childPrn(); // 상속되지 않은 메서드 접근 불가 = 오류 발생!
		
		System.out.println("-------------------------");
		// Parent p3의 인스턴스를 Child타입 변수 c3에 전달
//		Child c3 = p3; // 컴파일에러 발생! => 다운캐스팅은 강제(명시적) 형 변환 필수!
		Child c3 = (Child)p3; // 형 변환 연산자를 사용하여 다운캐스팅 수행
		// 다운캐스팅에 의해 참조 가능한 영역이 확대됨(접근 가능한 메서드 : 1개 -> 2개)
		c3.childPrn(); // 상속받은 메서드
		c3.parentPrn(); // 상속되지 않은(서브클래스에서 직접 정의한) 메서드 호출 가능
		// => Parent p3 = new Child(); 과정에서 업캐스팅으로 인해 잠시 영역의 축소가 일어나지만
		//	  Child c3 = (Child)p3; 과정에서 다운캐스팅으로 인해 다시 영역의 확대가 일어나므로
		// Child인스턴스에 Child타입 변수로 접근하게 되므로 정상저인 모든 범위에 접근 가능해짐
		
		// ======================= 다운 캐스팅 =======================
		/*
		 * - 서브클래스의 레퍼런스가 슈퍼클래스의 인스턴스를 가리키는 것(= 참조하는 것)
		 *   (= 슈퍼클래스의 인스턴스를 서브클래스 타입으로 형 변환 하는 것)
		 * - 참조 가능한 영역의 확대 발생
		 * - 자동(묵시적)형 변환이 일어나지 않음 = 명시적 형 변환(= 강제 형 변환)이 필수!
		 * - 강제 형변환을 통해 문법적 오류가 해결되더라도 
		 *   실제 실행하는 시점에서 오류(= 논리적 오류)가 발생하게 됨
		 *   => 참조 영역의 확대로 존재하지 않는 영역에 대한 참조 위험성 때문
		 * ===============================================================================
		 * - 다운 캐스팅 후에도 실행 시 예외(오류)가 발생할 수 있으믈
		 *   인스턴스의 클래스 타입과 참조하는 레퍼런스 변수의 상속 관계를 고려해서
		 *   명시적 형 변환(= 강제 형 변환)을 수행해야한다.
		 *   
		 * => 결론! 이전에 이미 업캐스팅 된 레퍼런스를
		 *    다시 다운캐스팅하는 경우에만 안전하다!
		 *    (그 외의 다운캐스팅은 인정되지 않는다!)
		 *   
		 */
		
		
	}

}

class Parent{
	
	public void parentPrn() {
		System.out.println("슈퍼클래스의 parentPrn()");
		
	}
}


class Child extends Parent{
	
	public void childPrn() {
		System.out.println("서브클래스의 childPrn()");
	}
}






