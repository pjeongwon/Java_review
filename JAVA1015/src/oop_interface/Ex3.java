package oop_interface;

public class Ex3 {

	public static void main(String[] args) {
		/*
		 * 자바에서 클래스간에는 다중 상속을 허용하지 않는다!.
		 * = 다이아몬드 상속 과정에서의 호출 모호성 때문
		 * ex) A클래스 extends B클래스, C클래스 {} => 오류발생!
		 * 
		 * 인터페이스간의 다중 상속은 허용됨
		 * => 복수개의 부모 인터페이스가 가진 메서드는 어차피 추상메서드일 뿐이므로
		 * 서브클래스에서 어느 부모의 메서드건 무조건 오버라이딩을 통해 구현해야하므로
		 * 어느 메서드인지는 중요하지 않기 때문!
		 * ex) A implements B인터페이스, C인터페이스 {} = 사용 가능!
		 * 
		 *  인터페이스끼리의 상속은 implements(구현)가 아닌 extends(확장)을 통한 상속을 표현
		 *  => 부모가 가진 추상메서드를 서브인터페이스에서 구현할수 없으므로
		 *     단순히 상속을 통해 가지곰나 있으면 추상메서드를 갖게 됨
		 *     따라서, 인터페이스끼리 상속 시 implements가 아닌 extends키워드 사용
		 *  => 또한, 인터페이스끼리의 상속 시에는 다중 상속도 가능함
		 *  ex) A인터페이스 extends B인터페이스, C인터페이스{}
		 */
		
		고래상어클래스 고래상어 = new 고래상어클래스();
		고래상어.번식();
		
		동물인터페이스 동물 = new 고래상어클래스();
		동물.번식();
		
		
		
		
		
		
		
	}

}

class 동물클래스{
	// 모든 동물은 '번식'을 한다.
	public void 번식() {
		System.out.println("모든 동물은 번식을 한다.");
	}
}

// 상어클래스 클래스 정의 - 동물클래스 클래스 상속
class 상어클래스 extends 동물클래스{

	@Override
	public void 번식() {
		System.out.println("상어는 알을 낳아 번식!");
	}
	
}

//고래클래스 클래스 정의 - 동물클래스 클래스 상속
class 고래클래스 extends 동물클래스{

	@Override
	public void 번식() {
	System.out.println("고래는 새끼를 낳아 번식!");
	}
}
// 상어클래스와 고래클래스를 상속받는 고래상어클래스 클래스 정의(자바는 다중상속 불가!)
//class 고래상어클래스 extends 상어클래스, 고래클래스{} // 오류발생!
// => 상어클래스가 가진 번식()메서드와 고래클래스가 가진 번식()메서드 모두를 상속받게 되면 
//    고래상어클래스에서 번식()메서드를 호출할때 어느 클래스의 번식()메서드인지 구별 불가능!
// => 따라서, 자바에서 다이아몬드 상속 과정에서
//	  부모 메서드 호출의 모호성을 배제하기 위해 다중 상숙을 허용하지 않는다!
// => 인터페이스를 상속을 구현하면 이러한 문제점 해결 가능하다!

interface 동물인터페이스{
	// 모든 동물은 '번식'을 한다. => 번식한다는 개념만 전달하기 위해 추상메서드로만 정의 가능
	
	public void  번식();
	
}

// 동물인터페이스를 상속받는 고래인터페이스와 상어인터페이스 정의
//interface 고래인터페이스 implements 동물인터페이스{} // 오류발생!
// => 인터페이스를 상속받아 추상메서드를 구현하면 인터페이스 내의 규칙이 꺠짐
//	  따라서, 인터페이스끼리는 '구현(implements)'이 아닌 '확장(extends)'을 통한 상속이 필수!
interface 고래인터페이스 extends 동물인터페이스{}

interface 상어인터페이스 extends 동물인터페이스{}

// 서브클래스에서 2개 이상의 부모 인터페이스를 지정할 수 있다!(= 다중 상속 가능하다!)
class 고래상어클래스 implements 고래인터페이스,상어인터페이스{
	// 서브클래스인 고래상어클래스 입장에서는 어차피 부모(고래, 상어)의 번식()메서드는 무상메서드일 뿐이므로
	// 구별하지않고 자신이 직접 오바리이딩을통해 구현하므로
	// 번식()메서드가 어느 부모의 메서드인지는 중요하지않다!(= 구별 불필요)
	@Override
	public void 번식() {
		System.out.println("고래상어는 새끼를 낳아 번식!");
	}
	
}












