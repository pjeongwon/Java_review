package keyword_static;

public class Ex {

	public static void main(String[] args) {
		/*
		 * < 자바 프로그램 실행 과정 >
		 * 0. 소스코드 작성 후 컴파일(번역) 후 클래스 실행
		 * 1. 클래스가 로딩 => 클래스 내의 static 변수 및 메서드가 메모리에 로딩됨 --> b
		 * 	  ex) main()메서드도 static메서드이므로 함께 로딩됨
		 * 2. main() 메서드 호출(실행)
		 * 3. 인스턴스 생성(new) => 클래스 내의 인스턴스 변수 및 메서드가 메모리에 로딩됨 --> a
		 * 4. 메서드 호출(실행) => 메서드 내의 로컬 변수가 메모리에 로딩됨
		 * 5. 결과 출력
		 * 
		 * < 인스턴스 멤버 >
		 * - 클래스 내에서 선언 및 정의된 메머변수 및 메서드
		 * - static 키워드가 붙지 않은 멤버
		 * - 반드시 인스턴스 생성 후에 접근 해야함(참조변수를 통해 메모리 접근 가능)
		 * 	 ex) Student s = new Student(); // '인스턴스' 생성 후
		 * 		 s.id = "20211111"; // 인스턴스의 주소가 저장된 '참조변수'를 통해 접근 가능
		 * 
		 * < static 키워드 >
		 * - 클래스, 메서드, 변수의 제한자(= 지정자)로 사용
		 * - 메서드 또는 변수에 static 키워드를 사용할 경우
		 *   인스턴스 생성과 상관없이 클래스가 메모리에 로딩되는 시점에 해당 멤버가 함께 로딩됨
		 *   => ★ 따라서, 참조변수 없이 클래스명만으로 해당 멤버에 접근 가능 ★
		 *   
		 * < static 멤버 접근 기본 문법 >
		 * 클래스명.멤버변수명 또는 클래스명.메서드명()
		 * ------------------------------------------------------------------------------------
		 * 1. static 변수(= 정적 변수 = 클래스변수) 
		 * - 인스턴스 생성 전, 클래스가 메모리에 로딩될 때 static 변수도 함께 메모리에 로딩됨
		 * 	 (= 인스턴스 생성 없이도 메모리에 해당 변수가 생성됨)
		 *   => 따라서, 참조변수(인스턴스 생성) 없이도 클래스명만으로 해당 변수에 접근 가능
		 * - 모든 인스턴스에서 하나의 메모리 공간(변수)를 공유함
		 *   (= 클래스 당 하나만 생성됨)
		 *   
		 *   
		 */
		// static멤버는 인스턴스 생성과 상관없이 클래스가 로딩될 때 메모리에 로딩되므로
		// 인스턴스 생성 코드와는 무관한 위치에서도 접근 가능함
//		System.out.println("StaticMember.a" + StaticMember.a); // 인스턴스변수는 접근 불가
		System.out.println("StaticMember.b" + StaticMember.b); // static변수만 접근 가능
		
		System.out.println("----------------------------");
		// StaticMember 인스턴스 생성
		StaticMember s1 = new StaticMember();
		StaticMember s2 = new StaticMember();
		
		System.out.println("s1.a : " + s1.a + ", s2.a : " +s2.a);
		System.out.println("s1.b : " + s1.b + ", s2.b : " +s2.b); // static 변수 기울어짐
		System.out.println("------------------------");
		
		s1.a = 99; 
		System.out.println("s1.a : " + s1.a + ", s2.a : " +s2.a); // 99, 20 출력
		// => s1인스턴스에서 인스턴스 멤버변수 a값을 변경하더라도,
		//    s2인스턴스와 관계가 없으므로(서로 다른 주소값을 가지므로)
		//    s2인스턴스의 인스턴스 멤버변수 a값에는 아무런 영향이 없다(= 변경되지 않음)
		// => 인스턴스 변수는 인스턴스 당 하나씩 생성되므로 모든 인스턴스가 각각 따로 관리하는 변수
		
		// s1 인스턴스 static 변수(=클래스 변수) b값을 999로 변경
//		s1.b = 999; // s1 인스턴스를 통해 static변수 b에 접근하는 문법 사용 시 (추천 x)
		// ★static 변수는 클래스명을 통해 직접접근이 가능하므로 클래스명.변수명 형태로 사용 가능 
		StaticMember.b = 999;
		
		System.out.println("s1.b : " + s1.b + ", s2.b : " +s2.b);
		// => s1인스턴스에서 static 멤버변수 b값을 변경하면
		//    하나의 메모리 공간을 s2인스턴스도 함께 참조하므로
		//    따라서, s2인스턴스의 b값도 999로 출력됨
		// => static 멤버변수는 클래스 당 하나씩만 생성되는 멤버변수이며
		//    모든 인스턴스가 공유하므로
		//    하나의 인스턴스에서 값을 변경하면 다른 인스턴스에도 영향이 있음!
		
	}

}

class StaticMember{
	int a = 10; // 인스턴스(instance) 변수
	// => 각 인스턴스에서 별도로 관리하는 멤버변수
	// => StaticMember 클래스의 인스턴스가 생성될 때 생성(메모리에 로딩)되는 변수
	// => 외부에서 접근 시 반드시 인스턴스 생성 후 참조변수를 통해 접근해야함
	static int b = 20; // 클래스(static 또는 정적) 변수
	// => 모든 인스턴스에서 공유하는 멤버변수
	// => StaticMember클래스가 메모리에 로딩될 때 생성(메모리에 로딩)되는 변수
	// => 외부에서 접근 시 클래스명만으로 접근 가능하며, 인스턴스 생성 없이도 접근 가능함
	
	public void method() {
		// 자신의 클래스 내의 메서드에서 접근 시 static변수에 인스턴스 접근 방법 동일함
		a = 99;
		b = 999;
	}
	
	
	
}


