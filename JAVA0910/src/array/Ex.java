package array;

public class Ex {

	public static void main(String[] args) {
		// 기본 데이터타입 변수를 사용하여 5명의 점수를 저장하는 경우
		// => 5명의 점수를 저장하기 위한 변수 5개를 각각 선언해야함
		
		int score1 = 80, score2 = 100, score3 = 50, score4 = 90, score5 = 77;
		// 또한, 각 변수에 저장된 값을 사용하여 출력하거나, 합계 등을 계산하는 경우
		// 각각의 변수명이 다르므로 반복문을 통해 반복 사용도 불가능하므로 코드가 길어짐
		// => 변수명은 문자열 결합을 통해 생성할 수는 없다! 
		int sum = 0; // 합계를 누적할 변수
		sum += score1;
		sum += score2;
		sum += score3;
		sum += score4;
		sum += score5;


		/* 
		 * 배열(Array)
		 * - 같은 타입 데이터 여러개를 하나의 변수명을 사용하여 연속된 공간으로 다루는 것
		 *  
		 * < 배열의 특징 >
		 * 1. 같은 타입의 데이터만 하나의 배열로 관리 가능
		 * 2. 기본 데이터타입과 참조 데이터타입 모두 배열로 관리 가능
		 * 3. 배열명(= 변수명)을 사용하여 여러개의 데이터를 관리 가능 
		 * 4. 배열 내에 자동으로 부여되는 번호(인덱스 = 참조번호)를 사용하여
		 * 	  배열의 각 요소에 접근 가능
		 * 	  => 인덱스는 0부터 시작하여 배열크기 -1번까지 자동으로 부여됨
		 * 		 ex) 배열 크기가 5일 경우 5개의 데이터를 저장 가능하며, 인덱스는 0 ~ 4번까지 부여됨
		 * 5. 배열의 크기는 배열명.length형식으로 속성 값을 사용하여 얻을 수 있음
		 * 6. 배열 사용시 선언 -> 생성 -> 초기화의 과정을 거쳐서 사용해야함
		 * 	  (변수는 선언 -> 초기화 과정만 거쳤음)
		 * 7. 한 번 생성된 배열은 크기 변경이 불가능
		 *
		 *  < 배열 선언 기본 문법 >
		 * 데이터타입[] 변수명;
		 * => 데이터타입에 해당하는 배열 타입으로 변수(배열)를 선언
		 * => 스택(Stack)영역에 배열 공간의 주소를 저장하는 참조 변수만 생성됨
		 * => 아직 데이터를 저장할 수 있는 공간은 생성되기 전이므로 데이터 저장 불가!
		 * 
		 *  < 배열 생성 기본 문법 >
		 *  변수명 = new 데이터타입[배열 크기];
		 *  => new연산자에 의해 힙(Heap)영역에 배열 크기만큼의 메모리 공간이 생성되고
		 *     해당 배열에 저장되는 데이터의 타입은 지정한 데이터타입으로 정해지며,
		 *     생성된 배열 공간의 주소값을 좌변의 참조타입 변수에 저장
		 *  => 배열 크기만큼의 공간이 생성된 후 해당 배열 공간에 자동으로 인덱스 부여됨
		 *     (인덱스 번호는 0부터 배열크기 -1까지 사용)
		 *  => 생성된 배열 공간은 해당 데이터타입의 기본 값으로 자동으로 초기화 수행됨
		 *	   (ex. 정수형(long 제외) 기본값 = 0, long 기본값 = 0.0L
		 *		float 기본값 = 0.0f, double 기본값 = 0.0,
		 *		String(참조형) 기본값 = null
		 *
		 *  < 배열 접근 기본 문법 >
		 *  변수명[인덱스] 
		 *  => 해당 변수가 가리키는 배열 공간의 주소값을 참조하여 힙 공간에 접근한 뒤
		 *     실제 데이터가 저장된 배열 공간의 인덱스 번호에 해당하는 요소에 접근
		 *  => 변수명은 배열의 이름(= 아파트 이름)이고, 인덱스는 배열의 요소 위치(= 아파트 호수)
		 *  
		 *  < 반복문을 사용한 배열 접근 공식 >
		 *  for(int i = 0; i < 배열명.length; i++){
		 *  	// 배열명[i] 형식을 사용하여 배열의 각 요소에 차례대로 접근 가능
		 *  }
		 *  => 배열 인덱스가 0번부터 배열크기 -1까지 부여되므로
		 *     for문 사용시 0부터 시작하여 조건식에 배열크기보다 작을동안 반복작업 수행
		 *     이 때, 배열의 크기는 배열명.length속성 사용
		 */
		
		// 배열 선언 : 데이터타입[] 변수명;
		// 정수형 데이터를 여러개 저장 가능한 정수형 배열 score를 선언
		// int score;  기본 데이터타입 변수 score선언(메모리 공간도 생성되므로 데이터 저장 가능)
		int[] score; // 참조 데이터타입 변수(배열) score선언(데이터 아직 저장 불가)
		// => 스택 공간에 정수형 배열의 주소값을 저장할 공간이 생성되고, 이름이 score로 설정됨
		
		// 배열 생성 : 변수명 = new 데이터타입[배열 크기];
		score = new int[5];
		// 힙 공간에 정수형 데이터 5개 저장 가능한 연속적인 공간이 생성되고 
		// 해당 공간에 인덱스 0 ~ 4까지 자동으로 부여됨
		// => 이제부터 실제 데이터를 저장 가능
		
		// 배열 접근 : 변수명[인덱스]
		// => 변수에 저장된 주소값을 참조하여 힙 공간의 실제 배열 위치에 접근한 후
		//	  인덱스 번호를 통해 데이터가 저장된 실제 공간에 접근0
		System.out.println("score 배열의 0번 인덱스 : " + score[0]);
		System.out.println("score 배열의 0번 인덱스 : " + score[1]);
		System.out.println("score 배열의 0번 인덱스 : " + score[2]);
		System.out.println("score 배열의 0번 인덱스 : " + score[3]);
		System.out.println("score 배열의 0번 인덱스 : " + score[4]);
		// 5개의 크기(공간)를 갖는 배열의 인덱스는 0 ~ 4까지 존재하므로
		// 이 때, 4보다 큰 인덱스를 지정할 경우 오류 발생하게 됨
//		System.out.println("score 배열의 0번 인덱스 : " + score[5]); 오류 발생!
		/* -> 오류 발생 시 메시지는 다음과 같이 출력됨
		 * Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 5
		 * at array.Ex.main(Ex.java:72)
		 * => java.lang.ArrayIndexOutOfBoundsException : 원인 메시지(배열 인덱스 벗어났다는 뜻)
		 * 	  이 때, java.lang.ArrayIndexOutOfBoundsException: 뒤의 숫자는 잘못된 인덱스 번호가 출력됨
		 * => array.Ex.main(Ex.java:72) : 오류가 발생한 코드 위치
		 * 	  Ex클래스의 main메서드에서 발생(Ex.java파일의 72번 라인에서 오류 발생)
		 * => 주의! 오류가 발생한 사실은 코드 작성(번역) 시점에서 알 수 없으며,
		 *    무조건 실행된 시점에서 실제 메모리 공간을 찾아갔을 때 알 수 있다!
		 *    즉, 코드 상에 오류(컴파일 에러)가 표시되지 않는다!
		 */
		
		// 배열 크기 : 변수명.length
		System.out.println("배열 score의 크기(길이) : " + score.length);
		
		
		// 배열 초기화 : 변수명[인덱스] = 데이터;
		// => 배열 내의 각 인덱스 별로 점수 저장(80, 100, 50, 90, 77)
		score[0] = 80;
		score[1] = 100;
		score[2] = 50;
		score[3] = 90;
		score[4] = 77;
		
		System.out.println("score 배열의 0번 인덱스 : " + score[0]);
		System.out.println("score 배열의 0번 인덱스 : " + score[1]);
		System.out.println("score 배열의 0번 인덱스 : " + score[2]);
		System.out.println("score 배열의 0번 인덱스 : " + score[3]);
		System.out.println("score 배열의 0번 인덱스 : " + score[4]);
		
		System.out.println("-------------------------------");
		
		
		for(int i = 0; i < score.length; i++) {
			System.out.println("score 배열의 " + i + "번 인덱스 : " + score[i]);
		}
		
		
	}

}
